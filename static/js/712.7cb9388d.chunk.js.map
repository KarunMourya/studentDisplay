{"version":3,"file":"static/js/712.7cb9388d.chunk.js","mappings":"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","sources":["Components/Alert/Alert.jsx","Components/Alert/Snackbar.jsx","Components/Login/Login.jsx"],"sourcesContent":["import React from \"react\";\r\nimport MuiAlert from \"@mui/material/Alert\";\r\n\r\nconst Alert = React.forwardRef(function Alert(props, ref) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport { Snackbar as SnackBar } from \"@mui/material\";\r\nimport Alert from \"./Alert\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { clearMessage } from \"../../redux/actions/fetchDataAction\";\r\n\r\nconst Snackbar = (props) => {\r\n  const {\r\n    status,\r\n    confirmationSnackbarMessage,\r\n    confirmationSnackbarOpen,\r\n    setConfirmationSnackbarOpen,\r\n  } = props;\r\n  const dispatch = useDispatch();\r\n  let severity = \"\";\r\n  status ? (severity = \"error\") : (severity = \"success\");\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    setConfirmationSnackbarOpen(false);\r\n  };\r\n  console.log(confirmationSnackbarMessage);\r\n  return (\r\n    <SnackBar\r\n      open={confirmationSnackbarOpen}\r\n      autoHideDuration={6000}\r\n      onClose={handleClose}\r\n    >\r\n      <Alert onClose={handleClose} severity={severity} sx={{ width: \"100%\" }}>\r\n        {confirmationSnackbarMessage}\r\n      </Alert>\r\n    </SnackBar>\r\n  );\r\n};\r\n\r\nexport default Snackbar;\r\n","import * as React from \"react\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport Box from \"@mui/material/Box\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { loadingToken } from \"../../redux/actions/loginUserAction\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport Snackbar from \"../Alert/Snackbar\";\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function Login() {\r\n  const [confirmationSnackbarOpen, setConfirmationSnackbarOpen] =\r\n    React.useState(false);\r\n  const dispatch = useDispatch();\r\n  const { token, error, message } = useSelector((state) => state.login);\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = React.useCallback(async (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.currentTarget);\r\n    const obj = {\r\n      email: data.get(\"email\"),\r\n      password: data.get(\"password\"),\r\n    };\r\n    dispatch(loadingToken(obj));\r\n    setConfirmationSnackbarOpen(true);\r\n  },[dispatch]);\r\n\r\n  React.useEffect(() => {\r\n    if (token) {\r\n      localStorage.setItem(\"token\", token);\r\n      navigate(\"/dashboard\");\r\n    }\r\n  }, [token]);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            onSubmit={handleSubmit}\r\n            noValidate\r\n            sx={{ mt: 1 }}\r\n          >\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              id=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}\r\n            >\r\n              Sign In\r\n            </Button>\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n      <Snackbar\r\n        status={error ? true : false}\r\n        confirmationSnackbarMessage={message}\r\n        confirmationSnackbarOpen={confirmationSnackbarOpen}\r\n        setConfirmationSnackbarOpen={setConfirmationSnackbarOpen}\r\n      />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n"],"names":["React","props","ref","_jsx","MuiAlert","_objectSpread","elevation","variant","status","confirmationSnackbarMessage","confirmationSnackbarOpen","setConfirmationSnackbarOpen","severity","useDispatch","handleClose","event","reason","console","log","SnackBar","open","autoHideDuration","onClose","children","Alert","sx","width","theme","createTheme","Login","_React$useState","_React$useState2","_slicedToArray","dispatch","_useSelector","useSelector","state","login","token","error","message","navigate","useNavigate","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","data","obj","wrap","_context","prev","next","preventDefault","FormData","currentTarget","email","get","password","loadingToken","stop","_x","apply","arguments","localStorage","setItem","_jsxs","ThemeProvider","Container","component","maxWidth","CssBaseline","Box","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","onSubmit","noValidate","mt","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","type","Button","mb","Snackbar"],"sourceRoot":""}